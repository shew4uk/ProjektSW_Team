using System;
using System.Diagnostics;
using System.Threading;
using System.Collections.Generic;
using System.Drawing;
using System.Numerics;
using FastConsole.Engine.Elements;
using FastConsole.Engine.Core;

delegate Scene Scene();

enum Room
{
    Room1,
    Room2
}

class Program
{
    public static Room CurrentRoom = Room.Room1;
    public static bool IsDoorOpen = true;

    public static void Main()
    {
        Scene sceneToRender = MenuScene();
        while (sceneToRender != null)
        {
            sceneToRender = sceneToRender.Invoke();
        }
    }

    public static Scene GameScene()
    {
        const int FPS = 30;
        const int frameTime = 1000 / FPS;
        bool isRunning = true;
        Player player = new Player(1, 3, 5, 10, 10);
        List<Bullet> bullets = new List<Bullet>();

        // Додавання ворогів
        List<Enemy> enemies = new List<Enemy>
        {
            new SkeletonWarrior(5, 5),
            new SkeletonArcher(10, 10),
            new FireMage(15, 8),
            new DarkKnight(18, 3),
            new DarkEnergy(7, 14)
        };

        List<Element> elements = new List<Element>();
        Canvas Rooms = new Canvas(new Size(1,1));
        PlayerDrawer playerdrawer = new PlayerDrawer(player);
        
        Rooms.CellWidth = 1;
        DrawRoom1(Rooms);

        elements.Add(Rooms);
        elements.Add(playerdrawer);
        while (isRunning)
        {
            if (Time.TryUpdate())
            {
                Element.UpdateAndRender(elements);

                switch (CurrentRoom)
                {
                    case Room.Room1:
                        if (IsDoorOpen && player.PlayerX >= 9 && player.PlayerX <= 11 && player.PlayerY == 18)
                        {
                            CurrentRoom = Room.Room2;
                            player.PlayerX = 14;
                            player.PlayerY = 2;
                        }
                        break;

                    case Room.Room2:
                        if (IsDoorOpen && player.PlayerX == 14 && player.PlayerY == 1)
                        {
                            CurrentRoom = Room.Room1;
                            DrawRoom1(Rooms);
                            player.PlayerX = 10;
                            player.PlayerY = 17;
                        }
                        break;
                }

                player.HandleInput(CurrentRoom.ToString(), bullets);

                foreach (var bullet in bullets)
                {
                    bullet.Move();
                }

                bullets.RemoveAll(b => b.IsOutOfRange() || b.IsCollidingWithWall(CurrentRoom.ToString()) || b.IsCollidingWithDoor(CurrentRoom.ToString()));

                player.Draw();

                // Логіка ворогів
                foreach (var enemy in enemies)
                {
                    enemy.MoveTowardsPlayer(player);
                    enemy.Draw();
                }
            }
        }

        return null;
    }

    public static Scene Info()
    {
        const int FPS = 60;
        const int frameTime = 1000 / FPS;
        bool isRunning = true;

        while (isRunning)
        {
            Console.Clear();
            Console.WriteLine("Information Scene");
            Thread.Sleep(frameTime);
        }

        return null;
    }

    public static Scene MenuScene()
    {
        int boxSize = 32;
        string[] menuButtons = new string[]
        {
            "Start",
            "Info",
            "Settings",
            "Exit"
        };
        int selectedButtonIndex = 0;
        bool isRunning = true;
        double refreshRate = 1.0 / 15.0;
        Stopwatch stopwatch = new Stopwatch();
        stopwatch.Start();

        Console.CursorVisible = false;

        while (isRunning)
        {
            if (stopwatch.Elapsed.TotalSeconds > refreshRate)
            {
                stopwatch.Restart();
                selectedButtonIndex = Math.Clamp(selectedButtonIndex, 0, menuButtons.Length - 1);

                Console.Clear();
                PrintMessageNTimes("-", boxSize);
                Console.WriteLine();
                PrintSurrondedMessage("|", "Dungeons Of Demons", "|", boxSize);
                Console.WriteLine();
                PrintSurrondedMessage("|", "Created by: Shewchuks Team", "|", boxSize);
                Console.WriteLine();
                PrintMessageNTimes("-", boxSize);
                Console.WriteLine();

                for (int i = 0; i < menuButtons.Length; i++)
                {
                    if (i == selectedButtonIndex)
                    {
                        Console.BackgroundColor = ConsoleColor.Green;
                        PrintSurrondedMessage("*", menuButtons[i], "*", boxSize);
                        Console.ResetColor();
                    }
                    else
                    {
                        PrintSurrondedMessage("", menuButtons[i], "", boxSize);
                    }
                    Console.WriteLine();
                }

                if (Console.KeyAvailable)
                {
                    ConsoleKeyInfo key = Console.ReadKey(true);
                    switch (key.Key)
                    {
                        case ConsoleKey.W:
                        case ConsoleKey.UpArrow:
                            selectedButtonIndex = (selectedButtonIndex - 1 + menuButtons.Length) % menuButtons.Length;
                            break;
                        case ConsoleKey.S:
                        case ConsoleKey.DownArrow:
                            selectedButtonIndex = (selectedButtonIndex + 1) % menuButtons.Length;
                            break;
                        case ConsoleKey.Enter:
                            switch (selectedButtonIndex)
                            {
                                case 0:
                                    return GameScene;
                                case 1:
                                    return Info;
                                case 2:
                                    Console.Clear();
                                    Console.WriteLine("Settings Menu is not implemented yet.");
                                    Thread.Sleep(1000);
                                    break;
                                case 3:
                                    Ending(400);
                                    isRunning = false;
                                    break;
                            }
                            break;
                    }
                }
            }
        }

        Console.WriteLine("Goodbye");
        return null;
    }

    public static void PrintMessageNTimes(string message, int n)
    {
        Console.Write(new string(message[0], n));
    }

    public static void PrintSurrondedMessage(string before, string message, string after, int boxSize, double alignment = 0.5)
    {
        Console.Write(before);
        boxSize = boxSize - (before.Length + after.Length);
        int start = (int)((boxSize - message.Length) * alignment);
        Console.Write(new string(' ', start));
        Console.Write(message);
        Console.Write(new string(' ', boxSize - start - message.Length));
        Console.Write(after);
    }

    public static void Ending(int wait)
    {
        for (int i = 0; i < 3; i++)
        {
            Console.Clear();
            Console.WriteLine("Please wait" + new string('.', i));
            Thread.Sleep(wait);
        }
        Console.Clear();
    }

    public static void DrawRoom1(Canvas RoomF)
    {
        RoomF.CanvasSize = new Size(20, 20);
        RoomF.Fill(Color.DarkGray);
        RoomF.FillRect(1, 1, 18, 18, Color.Gray);
        RoomF.FillRect(8, 19, 4, 1, Color.Blue);
    }

    public static void DrawRoom2(Canvas RoomS)
    {
        Console.Clear();
        for (int y = 0; y < 15; y++)
        {
            Console.SetCursorPosition(0, y);
            Console.Write(DrawingHelper.ColorBackground(new string(' ', 32), Color.Gray));
        }
        for (int x = 0; x < 32; x++)
        {
            Console.SetCursorPosition(x, 0);
            Console.Write(DrawingHelper.ColorBackground(" ", Color.DarkGray));
            Console.SetCursorPosition(x, 14);
            Console.Write(DrawingHelper.ColorBackground(" ", Color.DarkGray));
        }
        for (int y = 0; y < 15; y++)
        {
            Console.SetCursorPosition(0, y);
            Console.Write(DrawingHelper.ColorBackground(" ", Color.DarkGray));
            Console.SetCursorPosition(31, y);
            Console.Write(DrawingHelper.ColorBackground(" ", Color.DarkGray));
        }
        for (int y = 1; y < 14; y++)
        {
            Console.SetCursorPosition(1, y);
            Console.Write(DrawingHelper.ColorBackground(new string(' ', 30), Color.Yellow));
        }
        Console.SetCursorPosition(13, 0);
        Console.Write(DrawingHelper.ColorBackground(new string(' ', 3), Color.Blue));
    }
}

class DrawingHelper
{
    public static string ColorText(string message, Color color)
    {
        string CSI = "\u001b[";
        return $"{CSI}38;2;{color.R};{color.G};{color.B}m{message}{CSI}0m";
    }

    public static string ColorBackground(string message, Color color)
    {
        string CSI = "\u001b[";
        return $"{CSI}48;2;{color.R};{color.G};{color.B}m{message}{CSI}0m";
    }

    public static string ColorBackgroundAndText(string message, Color foregroundColor, Color backgroundColor)
    {
        string CSI = "\u001b[";
        string foreground = $"38;2;{foregroundColor.R};{foregroundColor.G};{foregroundColor.B}";
        string background = $"48;2;{backgroundColor.R};{backgroundColor.G};{backgroundColor.B}";
        return $"{CSI}{foreground};{background}m{message}{CSI}0m";
    }
}

class Player
{
    public int Health { get; set; }
    public int Speed { get; set; }
    public int Damage { get; set; }
    public int PlayerX { get; set; }
    public int PlayerY { get; set; }

    public Player(int health, int speed, int damage, int playerX, int playerY)
    {
        Health = health;
        Speed = speed;
        Damage = damage;
        PlayerX = playerX;
        PlayerY = playerY;
    }

    public void HandleInput(string currentRoom, List<Bullet> bullets)
    {
        if (Console.KeyAvailable)
        {
            ConsoleKeyInfo key = Console.ReadKey(true);
            switch (key.Key)
            {
                case ConsoleKey.W:
                case ConsoleKey.UpArrow:
                    PlayerY--;
                    break;
                case ConsoleKey.S:
                case ConsoleKey.DownArrow:
                    PlayerY++;
                    break;
                case ConsoleKey.A:
                case ConsoleKey.LeftArrow:
                    PlayerX--;
                    break;
                case ConsoleKey.D:
                case ConsoleKey.RightArrow:
                    PlayerX++;
                    break;
                case ConsoleKey.Spacebar:
                    bullets.Add(new Bullet(PlayerX, PlayerY, 0, -1, 5));
                    break;
            }
        }
    }

    public void Draw()
    {
        Renderer.SetCursorPosition(PlayerX, PlayerY);
        Renderer.Write("P", Color.Green);
    }
}

class Bullet
{
    public int BulletX { get; set; }
    public int BulletY { get; set; }
    public int DirectionX { get; set; }
    public int DirectionY { get; set; }
    public int Range { get; set; }
    public int DistanceTraveled { get; set; }

    public Bullet(int bulletX, int bulletY, int directionX, int directionY, int range)
    {
        BulletX = bulletX;
        BulletY = bulletY;
        DirectionX = directionX;
        DirectionY = directionY;
        Range = range;
        DistanceTraveled = 0;
    }

    public void Move()
    {
        BulletX += DirectionX;
        BulletY += DirectionY;
        DistanceTraveled++;
    }

    public bool IsOutOfRange()
    {
        return DistanceTraveled >= Range;
    }

    public bool IsCollidingWithWall(string room)
    {
        // Додаємо логіку для перевірки стін
        return false;
    }

    public bool IsCollidingWithDoor(string room)
    {
        // Додаємо логіку для перевірки дверей
        return false;
    }

    public void Draw()
    {
        Renderer.SetCursorPosition(BulletX, BulletY);
        Renderer.Write(".", Color.Yellow);
    }
}

class PlayerDrawer : Element
{
    public Player player;

    public PlayerDrawer(Player p)
    {
        player = p;
    }

    public override void Update()
    {

    }

    public override void Render()
    {
        player.Draw();
    }
}

// Додаємо ворогів
class Enemy
{
    public int Health { get; set; }
    public int Damage { get; set; }
    public int EnemyX { get; set; }
    public int EnemyY { get; set; }
    public string Type { get; set; }

    public Enemy(int health, int damage, int x, int y, string type)
    {
        Health = health;
        Damage = damage;
        EnemyX = x;
        EnemyY = y;
        Type = type;
    }

    public void MoveTowardsPlayer(Player player)
    {
        if (EnemyX < player.PlayerX) EnemyX++;
        else if (EnemyX > player.PlayerX) EnemyX--;

        if (EnemyY < player.PlayerY) EnemyY++;
        else if (EnemyY > player.PlayerY) EnemyY--;
    }

    public void Draw()
    {
        Renderer.SetCursorPosition(EnemyX, EnemyY);
        Renderer.Write("E", Color.Red);
    }
}

// Конкретні вороги
class SkeletonWarrior : Enemy
{
    public SkeletonWarrior(int x, int y) : base(30, 5, x, y, "Skeleton Warrior") { }
}

class SkeletonArcher : Enemy
{
    public SkeletonArcher(int x, int y) : base(20, 3, x, y, "Skeleton Archer") { }

    public void Shoot(Player player, List<Bullet> bullets)
    {
        bullets.Add(new Bullet(EnemyX, EnemyY, player.PlayerX - EnemyX, player.PlayerY - EnemyY, 5));
    }
}

class FireMage : Enemy
{
    public FireMage(int x, int y) : base(25, 8, x, y, "Fire Mage") { }

    public void CastFireball(Player player, List<Bullet> bullets)
    {
        bullets.Add(new Bullet(EnemyX, EnemyY, player.PlayerX - EnemyX, player.PlayerY - EnemyY, 7));
    }
}

class DarkKnight : Enemy
{
    public DarkKnight(int x, int y) : base(50, 10, x, y, "Dark Knight") { }
}

class DarkEnergy : Enemy
{
    public DarkEnergy(int x, int y) : base(15, 6, x, y, "Dark Energy") { }

    public void DrainPlayer(Player player)
    {
        player.Health -= 2;
    }
}

// Renderer class
class Renderer
{
    public static void SetCursorPosition(int x, int y)
    {
        Console.SetCursorPosition(x, y);
    }

    public static void Write(string content, Color color)
    {
        Console.Write(DrawingHelper.ColorText(content, color));
    }

    public static void Write(string content, Color color, Color background)
    {
        Console.Write(DrawingHelper.ColorBackgroundAndText(content, color, background));
    }
}
